# CLAUDE.local

This file contains notes about tricky JSON syntax and patterns specific to this pagebuilder project.

## Component Structure Patterns

### Literal Components with Embedded Scripts
```json
{
  "name": "functions",
  "type": "literal", 
  "value": "<script>function drawTermDropdown(selected_term){...}</script>"
}
```
- HTML/CSS/JS code goes in the `value` field as a single escaped string
- All quotes inside must be properly escaped with backslashes
- Newlines are represented as `\n` in the JSON

### Block Components with Nested Structure
```json
{
  "components": [
    {
      "components": [...],  // Nested components array
      "name": "select_block_row",
      "style": "hide",      // CSS classes or styling
      "showInitially": true,
      "type": "block"
    }
  ],
  "role": "section",        // Semantic role
  "name": "select_block", 
  "style": "container",
  "showInitially": true,
  "type": "block"
}
```

### Form Select Components
```json
{
  "valueStyle": "form-select",     // Bootstrap CSS class
  "label": "Select a term",
  "loadInitially": true,           // Load data on page load
  "type": "select",
  "sourceModel": "sorrtrm",        // Virtual domain to query
  "labelKey": "STVTERM_DESC",      // Display field from query
  "valueKey": "SORRTRM_TERM_CODE", // Value field from query
  "onUpdate": "$term = $select_term; $sfrstca_data.$load();"  // JS event handler
}
```

## Tricky Syntax Patterns

### String Escaping in Literal Values
- Use `\"` for quotes inside JSON strings
- Use `\\` for backslashes
- Long HTML blocks should be formatted as single lines in JSON

### Variable References in onUpdate
- `$variableName` syntax for component values
- `$modelName.$load()` to refresh data sources
- Semicolon-separated statements

### AJAX URL Patterns
```javascript
const url = '/BannerExtensibility/internalPb/virtualDomains.service_name';
```
- Always use `/BannerExtensibility/internalPb/virtualDomains.{serviceName}` format
- Service name matches the virtual domain file name

### SQL Parameter Binding
```sql
WHERE SZBMPLN_PIDM = :parm_user_pidm
```
- Use `:parm_user_pidm` for current user context
- Other parameters passed from frontend as `:paramName`

### Date Formatting in SQL
```sql
TO_CHAR(SZBMPLN_FROM_DATE,'DD-MON-YY') || ' → ' || TO_CHAR(SZBMPLN_TO_DATE,'DD-MON-YY')
```
- Use `TO_CHAR` for date formatting
- Pipe operator `||` for string concatenation
- Unicode characters (like →) work in SQL strings

## Common Gotchas

1. **JSON Structure**: Components must be in `modelView.components` array
2. **Bootstrap Integration**: Uses Bootstrap 5 classes, loaded via CDN in style component  
3. **jQuery Dependency**: Frontend code assumes jQuery is available
4. **Role Security**: Both page-level and virtual domain-level role restrictions
5. **Case Sensitivity**: SQL column names are uppercase, JSON keys match exactly